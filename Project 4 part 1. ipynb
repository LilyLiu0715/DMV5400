{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Phase I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pandas.plotting import scatter_matrix\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>edible/poisonous</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>bruises?</th>\n",
       "      <th>odor</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-size</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stalk-surface-below-ring</th>\n",
       "      <th>stalk-color-above-ring</th>\n",
       "      <th>stalk-color-below-ring</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>ring-number</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>population</th>\n",
       "      <th>habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>n</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>y</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>l</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>g</td>\n",
       "      <td>f</td>\n",
       "      <td>n</td>\n",
       "      <td>f</td>\n",
       "      <td>w</td>\n",
       "      <td>b</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>a</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>y</td>\n",
       "      <td>y</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>g</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>l</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>s</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>p</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>v</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>s</td>\n",
       "      <td>y</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>g</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  edible/poisonous cap-shape cap-surface cap-color bruises? odor  \\\n",
       "0                p         x           s         n        t    p   \n",
       "1                e         x           s         y        t    a   \n",
       "2                e         b           s         w        t    l   \n",
       "3                p         x           y         w        t    p   \n",
       "4                e         x           s         g        f    n   \n",
       "5                e         x           y         y        t    a   \n",
       "6                e         b           s         w        t    a   \n",
       "7                e         b           y         w        t    l   \n",
       "8                p         x           y         w        t    p   \n",
       "9                e         b           s         y        t    a   \n",
       "\n",
       "  gill-attachment gill-spacing gill-size gill-color  ...  \\\n",
       "0               f            c         n          k  ...   \n",
       "1               f            c         b          k  ...   \n",
       "2               f            c         b          n  ...   \n",
       "3               f            c         n          n  ...   \n",
       "4               f            w         b          k  ...   \n",
       "5               f            c         b          n  ...   \n",
       "6               f            c         b          g  ...   \n",
       "7               f            c         b          n  ...   \n",
       "8               f            c         n          p  ...   \n",
       "9               f            c         b          g  ...   \n",
       "\n",
       "  stalk-surface-below-ring stalk-color-above-ring stalk-color-below-ring  \\\n",
       "0                        s                      w                      w   \n",
       "1                        s                      w                      w   \n",
       "2                        s                      w                      w   \n",
       "3                        s                      w                      w   \n",
       "4                        s                      w                      w   \n",
       "5                        s                      w                      w   \n",
       "6                        s                      w                      w   \n",
       "7                        s                      w                      w   \n",
       "8                        s                      w                      w   \n",
       "9                        s                      w                      w   \n",
       "\n",
       "  veil-type veil-color ring-number ring-type spore-print-color population  \\\n",
       "0         p          w           o         p                 k          s   \n",
       "1         p          w           o         p                 n          n   \n",
       "2         p          w           o         p                 n          n   \n",
       "3         p          w           o         p                 k          s   \n",
       "4         p          w           o         e                 n          a   \n",
       "5         p          w           o         p                 k          n   \n",
       "6         p          w           o         p                 k          n   \n",
       "7         p          w           o         p                 n          s   \n",
       "8         p          w           o         p                 k          v   \n",
       "9         p          w           o         p                 k          s   \n",
       "\n",
       "  habitat  \n",
       "0       u  \n",
       "1       g  \n",
       "2       m  \n",
       "3       u  \n",
       "4       g  \n",
       "5       g  \n",
       "6       m  \n",
       "7       m  \n",
       "8       g  \n",
       "9       m  \n",
       "\n",
       "[10 rows x 23 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load data from provided website\n",
    "df=pd.read_csv('mushroom.data.csv')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>edible/poisonous</th>\n",
       "      <th>odor</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>e</td>\n",
       "      <td>a</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>l</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8119</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8120</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8121</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8122</td>\n",
       "      <td>p</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8123</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>o</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8124 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     edible/poisonous odor spore-print-color habitat\n",
       "0                   p    p                 k       u\n",
       "1                   e    a                 n       g\n",
       "2                   e    l                 n       m\n",
       "3                   p    p                 k       u\n",
       "4                   e    n                 n       g\n",
       "...               ...  ...               ...     ...\n",
       "8119                e    n                 b       l\n",
       "8120                e    n                 b       l\n",
       "8121                e    n                 b       l\n",
       "8122                p    y                 w       l\n",
       "8123                e    n                 o       l\n",
       "\n",
       "[8124 rows x 4 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add meaningful names for each column in the DataFrame\n",
    "newdf=pd.DataFrame(df,\n",
    "                  columns=['edible/poisonous','odor', 'spore-print-color', 'habitat'])\n",
    "newdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Odor</th>\n",
       "      <th>SPcolor</th>\n",
       "      <th>Habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>e</td>\n",
       "      <td>a</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>l</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8119</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8120</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8121</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>b</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8122</td>\n",
       "      <td>p</td>\n",
       "      <td>y</td>\n",
       "      <td>w</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8123</td>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>o</td>\n",
       "      <td>l</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8124 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     E_P Odor SPcolor Habitat\n",
       "0      p    p       k       u\n",
       "1      e    a       n       g\n",
       "2      e    l       n       m\n",
       "3      p    p       k       u\n",
       "4      e    n       n       g\n",
       "...   ..  ...     ...     ...\n",
       "8119   e    n       b       l\n",
       "8120   e    n       b       l\n",
       "8121   e    n       b       l\n",
       "8122   p    y       w       l\n",
       "8123   e    n       o       l\n",
       "\n",
       "[8124 rows x 4 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf.columns = ['E_P', 'Odor', 'SPcolor', 'Habitat']\n",
    "newdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change names of value to be more meaningful with provided information\n",
    "# E_P Column\n",
    "newdf.E_P.replace({'e':'edible',\n",
    "                       'p':'poisonous'}, \n",
    "                      inplace = True)\n",
    "# Odor Column\n",
    "newdf.Odor.replace({'a':'almond', \n",
    "                   'l':'anise',\n",
    "                   'c':'creosote',\n",
    "                   'y':'fishy',\n",
    "                   'f':'foul',\n",
    "                   'm':'musty',\n",
    "                   'n':'none',\n",
    "                   'p':'pungent',\n",
    "                   's':'spicy'},\n",
    "                   inplace=True)\n",
    "# S/P-Color Column\n",
    "newdf.SPcolor.replace({'k':'black',\n",
    "                       'n':'brown',\n",
    "                       'b':'buff',\n",
    "                       'h':'chocolate',\n",
    "                       'r':'green',\n",
    "                       'o':'orange',\n",
    "                       'u':'purple',\n",
    "                       'w':'white',\n",
    "                       'y':'yellow'}, \n",
    "                       inplace=True)\n",
    "# Habitat Column\n",
    "newdf.Habitat.replace({'g':'grasses',\n",
    "                       'l':'leaves',\n",
    "                       'm':'meadows',\n",
    "                       'p':'paths',\n",
    "                       'u':'urban',\n",
    "                       'w':'waste',\n",
    "                       'd':'woods'\n",
    "                      },\n",
    "                      inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Odor</th>\n",
       "      <th>SPcolor</th>\n",
       "      <th>Habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>pungent</td>\n",
       "      <td>black</td>\n",
       "      <td>urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>almond</td>\n",
       "      <td>brown</td>\n",
       "      <td>grasses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>anise</td>\n",
       "      <td>brown</td>\n",
       "      <td>meadows</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>pungent</td>\n",
       "      <td>black</td>\n",
       "      <td>urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>brown</td>\n",
       "      <td>grasses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8119</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>buff</td>\n",
       "      <td>leaves</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8120</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>buff</td>\n",
       "      <td>leaves</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8121</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>buff</td>\n",
       "      <td>leaves</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8122</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>fishy</td>\n",
       "      <td>white</td>\n",
       "      <td>leaves</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8123</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>orange</td>\n",
       "      <td>leaves</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8124 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            E_P     Odor SPcolor  Habitat\n",
       "0     poisonous  pungent   black    urban\n",
       "1        edible   almond   brown  grasses\n",
       "2        edible    anise   brown  meadows\n",
       "3     poisonous  pungent   black    urban\n",
       "4        edible     none   brown  grasses\n",
       "...         ...      ...     ...      ...\n",
       "8119     edible     none    buff   leaves\n",
       "8120     edible     none    buff   leaves\n",
       "8121     edible     none    buff   leaves\n",
       "8122  poisonous    fishy   white   leaves\n",
       "8123     edible     none  orange   leaves\n",
       "\n",
       "[8124 rows x 4 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Perform exploratory data analysis__: \n",
    "show the distribution of data for each of the columns you selected, and show plots for edible/poisonous vs. odor as well as the other columns that you selected. It is up to you to decide which types of plots to use for these tasks. Include text describing your EDA findings."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show the distribution of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E_P</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>edible</td>\n",
       "      <td>4208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>poisonous</td>\n",
       "      <td>3916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Count\n",
       "E_P             \n",
       "edible      4208\n",
       "poisonous   3916"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarize E_P Data\n",
    "E_P=newdf.groupby(['E_P']).size().to_frame('Count')\n",
    "E_P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Show distribution of E_P data \n",
    "plt.title('Poisonous/Edible Distribution');\n",
    "sns.countplot(x='E_P',data=newdf);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Odor</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>none</td>\n",
       "      <td>3528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>foul</td>\n",
       "      <td>2160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>fishy</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>spicy</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>almond</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>anise</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pungent</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>creosote</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>musty</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Count\n",
       "Odor           \n",
       "none       3528\n",
       "foul       2160\n",
       "fishy       576\n",
       "spicy       576\n",
       "almond      400\n",
       "anise       400\n",
       "pungent     256\n",
       "creosote    192\n",
       "musty        36"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarize Odor Data\n",
    "Odor=newdf.groupby(['Odor']).size().to_frame('Count')\n",
    "Odor.sort_values(by='Count',ascending=False,inplace=True)\n",
    "Odor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a20f3da90>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Show distribution of Odor data \n",
    "plt.title('Odor Distribution');\n",
    "sns.countplot(x='Odor',data=newdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SPcolor</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>white</td>\n",
       "      <td>2388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>brown</td>\n",
       "      <td>1968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>black</td>\n",
       "      <td>1872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>chocolate</td>\n",
       "      <td>1632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>green</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buff</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>orange</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>purple</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yellow</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Count\n",
       "SPcolor         \n",
       "white       2388\n",
       "brown       1968\n",
       "black       1872\n",
       "chocolate   1632\n",
       "green         72\n",
       "buff          48\n",
       "orange        48\n",
       "purple        48\n",
       "yellow        48"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarize SPcolor Data\n",
    "SPcolor=newdf.groupby(['SPcolor']).size().to_frame('Count')\n",
    "SPcolor.sort_values(by='Count',ascending=False,inplace=True)\n",
    "SPcolor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a21250710>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Show distribution of SPcolor data \n",
    "plt.title('SPcolor Distribution')\n",
    "sns.countplot(x='SPcolor',data=newdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Habitat</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>woods</td>\n",
       "      <td>3148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>grasses</td>\n",
       "      <td>2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>paths</td>\n",
       "      <td>1144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>leaves</td>\n",
       "      <td>832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>urban</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>meadows</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>waste</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Count\n",
       "Habitat       \n",
       "woods     3148\n",
       "grasses   2148\n",
       "paths     1144\n",
       "leaves     832\n",
       "urban      368\n",
       "meadows    292\n",
       "waste      192"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summarize Habitat Data\n",
    "Habitat=newdf.groupby(['Habitat']).size().to_frame('Count')\n",
    "Habitat.sort_values(by='Count',ascending=False,inplace=True)\n",
    "Habitat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a212b2610>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Show distribution of Habitat data \n",
    "plt.title('Habitat Distribution')\n",
    "sns.countplot(x='Habitat', data=newdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show plots for edible/poisonous vs other indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Odor</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>almond</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>anise</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>3408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>creosote</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>fishy</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>foul</td>\n",
       "      <td>2160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>musty</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>none</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>pungent</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>spicy</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         E_P      Odor  Count\n",
       "0     edible    almond    400\n",
       "1     edible     anise    400\n",
       "2     edible      none   3408\n",
       "3  poisonous  creosote    192\n",
       "4  poisonous     fishy    576\n",
       "5  poisonous      foul   2160\n",
       "6  poisonous     musty     36\n",
       "7  poisonous      none    120\n",
       "8  poisonous   pungent    256\n",
       "9  poisonous     spicy    576"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a dataframe to calculate count of mushrooms by E_P and Odor\n",
    "E_P_Odor=newdf.groupby(['E_P','Odor'],as_index=False)['SPcolor'].count()\n",
    "E_P_Odor.rename(columns={'SPcolor':'Count'},inplace=True)\n",
    "E_P_Odor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Odor</th>\n",
       "      <th>Count_EP_Odor</th>\n",
       "      <th>Count_Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>almond</td>\n",
       "      <td>400</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>anise</td>\n",
       "      <td>400</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>3408</td>\n",
       "      <td>3528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>none</td>\n",
       "      <td>120</td>\n",
       "      <td>3528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>creosote</td>\n",
       "      <td>192</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>fishy</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>foul</td>\n",
       "      <td>2160</td>\n",
       "      <td>2160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>musty</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>pungent</td>\n",
       "      <td>256</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>spicy</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         E_P      Odor  Count_EP_Odor  Count_Total\n",
       "0     edible    almond            400          400\n",
       "1     edible     anise            400          400\n",
       "2     edible      none           3408         3528\n",
       "3  poisonous      none            120         3528\n",
       "4  poisonous  creosote            192          192\n",
       "5  poisonous     fishy            576          576\n",
       "6  poisonous      foul           2160         2160\n",
       "7  poisonous     musty             36           36\n",
       "8  poisonous   pungent            256          256\n",
       "9  poisonous     spicy            576          576"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creates dataframe to merge total count of mushrooms by E_P or not and Odor by edible or not\n",
    "EP_Odor = pd.merge(E_P_Odor,Odor,on=['Odor'],how='outer',suffixes=('_EP_Odor','_Total'))\n",
    "EP_Odor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Odor</th>\n",
       "      <th>Count_EP_Odor</th>\n",
       "      <th>Count_Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>almond</td>\n",
       "      <td>400</td>\n",
       "      <td>400</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>anise</td>\n",
       "      <td>400</td>\n",
       "      <td>400</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>none</td>\n",
       "      <td>3408</td>\n",
       "      <td>3528</td>\n",
       "      <td>96.598639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>none</td>\n",
       "      <td>120</td>\n",
       "      <td>3528</td>\n",
       "      <td>3.401361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>creosote</td>\n",
       "      <td>192</td>\n",
       "      <td>192</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>fishy</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>foul</td>\n",
       "      <td>2160</td>\n",
       "      <td>2160</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>musty</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>pungent</td>\n",
       "      <td>256</td>\n",
       "      <td>256</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>spicy</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         E_P      Odor  Count_EP_Odor  Count_Total     Percent\n",
       "0     edible    almond            400          400  100.000000\n",
       "1     edible     anise            400          400  100.000000\n",
       "2     edible      none           3408         3528   96.598639\n",
       "3  poisonous      none            120         3528    3.401361\n",
       "4  poisonous  creosote            192          192  100.000000\n",
       "5  poisonous     fishy            576          576  100.000000\n",
       "6  poisonous      foul           2160         2160  100.000000\n",
       "7  poisonous     musty             36           36  100.000000\n",
       "8  poisonous   pungent            256          256  100.000000\n",
       "9  poisonous     spicy            576          576  100.000000"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creates column Percent to calculate percentage of mushrooms by E_P and by Odor\n",
    "EP_Odor['Percent'] = (EP_Odor['Count_EP_Odor']/EP_Odor['Count_Total']) * 100\n",
    "EP_Odor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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hwLQb4vNuXrsdzu24BrwME5JkiRJKiHDniRJkiSVkGFPkiRJkkrIsCdJkiRJJWTYkyRJkqQSMuxJkiRJUgkZ9iRJkiR1eyecehazHv9ro8voUF5nT5IkSVJNzT1n5w5d36CzZnTo+gDGfuecDl9no7lnT5IkSVLpzJkzhx122IHRo0ezyy67cNhhh/H6668zadIkdtttN3beeWc+97nPsWTJEgDed9jRTH1oJsuWLePzJ3+V3d97KHuMGMn3xv0MgIdmPsoBH/kUww8eySeO+SIvvvTyyuW+eu6F7PfhT/Ku/T7MXfdOBWDx4iUce8rX2GPESN79/sO4ffJ9APzsuhs5+avnrqxz5FFf4I6772vxcdvDsCdJkiSplB577DGOO+44pk+fTt++fbnwwgs5+uijue6665gxYwZLly7l0ksvXWWZhx5+lGf+8U8e+PONTJ10A0eNOhSAY04+g29+9RSm/OkGdtphO8698M3lli5dxl2/uZbv/M9XVraPHX8NAFMn3cDPfvS/fP7kM1m8eEmLtbb0uO1h2JMkSZJUSgMHDmTfffcF4Mgjj2TSpEkMGTKE7bbbDoDRo0dz5513rrLMkEEDeGruPE752rf442130bfPJrz8yqu89PKrHLDPnpV1Hf6xlXvwAA750AgAdttlR/427+8A3H3/A3zq4x8FYPtt386gAVvzxJNzWqy1ucdtL8OeJEmSpFKKiLVeZvPNNuX+W3/FAfvsydjx13DCqWetcZkNN9gAgB49erB06TIAMpvv27NnD5YvX75yevGSf63z466JYU+SJElSKc2dO5d77rkHgGuuuYaDDz6YOXPmMHv2bACuuuoqDjzwwFWWef6FF1m+fDkjP/w+zj7tJKbNmMWmffuw+aZ9V+7N+/kvf83+ew9v9bH3e/ceXHvDLQA88dc5PP33Z9nuHUN428BtmP7woyxfvpyn//4sU6bNaPFx28tv45QkSZJUSu985zu58sorOf744xk6dCiXXHIJe++9N4cffjhLly5lzz335IQTTlhlmWee/SfHfenrK/e+feOMkwG47OJvcdLp5/D64kUMGTSQcRd+o9XHPn70Jznx9HPYY8RIevbowU8uOpcNN9yA9+y5G28bNIA9Roxkp+23ZdjO72z1cdvDsCdJkiSppmpxqYS2WG+99Rg7duwqbSNGjODBBx9cre+tE8ev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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "#plots newdf dataset by Odor and whether it is edible or not using the percentages\n",
    "sns.barplot(x='Odor',y='Percent',hue='E_P',data=EP_Odor);\n",
    "# give the plot a title\n",
    "plt.title('E_P and Odor');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>SPcolor</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>black</td>\n",
       "      <td>1648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>brown</td>\n",
       "      <td>1744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>buff</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>edible</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>orange</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>edible</td>\n",
       "      <td>purple</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>edible</td>\n",
       "      <td>white</td>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>edible</td>\n",
       "      <td>yellow</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>black</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>brown</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>1584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>green</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>white</td>\n",
       "      <td>1812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P    SPcolor  Count\n",
       "0      edible      black   1648\n",
       "1      edible      brown   1744\n",
       "2      edible       buff     48\n",
       "3      edible  chocolate     48\n",
       "4      edible     orange     48\n",
       "5      edible     purple     48\n",
       "6      edible      white    576\n",
       "7      edible     yellow     48\n",
       "8   poisonous      black    224\n",
       "9   poisonous      brown    224\n",
       "10  poisonous  chocolate   1584\n",
       "11  poisonous      green     72\n",
       "12  poisonous      white   1812"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a dataframe to calculate count of mushrooms by E_P and SPcolor\n",
    "EP_SPcolor = newdf.groupby(['E_P','SPcolor'],as_index=False)['Odor'].count()\n",
    "EP_SPcolor.rename(columns={'Odor':'Count'},inplace=True)\n",
    "EP_SPcolor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>SPcolor</th>\n",
       "      <th>Count_EP_SPcolor</th>\n",
       "      <th>Count_Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>black</td>\n",
       "      <td>1648</td>\n",
       "      <td>1872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>black</td>\n",
       "      <td>224</td>\n",
       "      <td>1872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>brown</td>\n",
       "      <td>1744</td>\n",
       "      <td>1968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>brown</td>\n",
       "      <td>224</td>\n",
       "      <td>1968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>buff</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>edible</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>48</td>\n",
       "      <td>1632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>1584</td>\n",
       "      <td>1632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>edible</td>\n",
       "      <td>orange</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>edible</td>\n",
       "      <td>purple</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>edible</td>\n",
       "      <td>white</td>\n",
       "      <td>576</td>\n",
       "      <td>2388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>white</td>\n",
       "      <td>1812</td>\n",
       "      <td>2388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>edible</td>\n",
       "      <td>yellow</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>green</td>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P    SPcolor  Count_EP_SPcolor  Count_Total\n",
       "0      edible      black              1648         1872\n",
       "1   poisonous      black               224         1872\n",
       "2      edible      brown              1744         1968\n",
       "3   poisonous      brown               224         1968\n",
       "4      edible       buff                48           48\n",
       "5      edible  chocolate                48         1632\n",
       "6   poisonous  chocolate              1584         1632\n",
       "7      edible     orange                48           48\n",
       "8      edible     purple                48           48\n",
       "9      edible      white               576         2388\n",
       "10  poisonous      white              1812         2388\n",
       "11     edible     yellow                48           48\n",
       "12  poisonous      green                72           72"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creates dataframe to merge total count of mushrooms by E_P or not and SPcolor by edible or not\n",
    "EP_SPcolor = pd.merge(EP_SPcolor,SPcolor,on=['SPcolor'],how='outer',suffixes=('_EP_SPcolor','_Total'))\n",
    "EP_SPcolor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>SPcolor</th>\n",
       "      <th>Count_EP_SPcolor</th>\n",
       "      <th>Count_Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>black</td>\n",
       "      <td>1648</td>\n",
       "      <td>1872</td>\n",
       "      <td>88.034188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>black</td>\n",
       "      <td>224</td>\n",
       "      <td>1872</td>\n",
       "      <td>11.965812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>brown</td>\n",
       "      <td>1744</td>\n",
       "      <td>1968</td>\n",
       "      <td>88.617886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>brown</td>\n",
       "      <td>224</td>\n",
       "      <td>1968</td>\n",
       "      <td>11.382114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>buff</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>edible</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>48</td>\n",
       "      <td>1632</td>\n",
       "      <td>2.941176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>chocolate</td>\n",
       "      <td>1584</td>\n",
       "      <td>1632</td>\n",
       "      <td>97.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>edible</td>\n",
       "      <td>orange</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>edible</td>\n",
       "      <td>purple</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>edible</td>\n",
       "      <td>white</td>\n",
       "      <td>576</td>\n",
       "      <td>2388</td>\n",
       "      <td>24.120603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>white</td>\n",
       "      <td>1812</td>\n",
       "      <td>2388</td>\n",
       "      <td>75.879397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>edible</td>\n",
       "      <td>yellow</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>green</td>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P    SPcolor  Count_EP_SPcolor  Count_Total     Percent\n",
       "0      edible      black              1648         1872   88.034188\n",
       "1   poisonous      black               224         1872   11.965812\n",
       "2      edible      brown              1744         1968   88.617886\n",
       "3   poisonous      brown               224         1968   11.382114\n",
       "4      edible       buff                48           48  100.000000\n",
       "5      edible  chocolate                48         1632    2.941176\n",
       "6   poisonous  chocolate              1584         1632   97.058824\n",
       "7      edible     orange                48           48  100.000000\n",
       "8      edible     purple                48           48  100.000000\n",
       "9      edible      white               576         2388   24.120603\n",
       "10  poisonous      white              1812         2388   75.879397\n",
       "11     edible     yellow                48           48  100.000000\n",
       "12  poisonous      green                72           72  100.000000"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creates column Percent to calculate percentage of mushrooms by E_P and by SPcolor\n",
    "EP_SPcolor['Percent'] = (EP_SPcolor['Count_EP_SPcolor']/EP_SPcolor['Count_Total']) * 100\n",
    "EP_SPcolor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "#plots newdf dataset by Odor and whether it is edible or not using the percentages\n",
    "sns.barplot(x='SPcolor',y='Percent',hue='E_P',data=EP_SPcolor);\n",
    "# give the plot a title\n",
    "plt.title('E_P vs SPcolor');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Habitat</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>grasses</td>\n",
       "      <td>1408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>edible</td>\n",
       "      <td>leaves</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>meadows</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>edible</td>\n",
       "      <td>paths</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>urban</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>edible</td>\n",
       "      <td>waste</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>edible</td>\n",
       "      <td>woods</td>\n",
       "      <td>1880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>grasses</td>\n",
       "      <td>740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>leaves</td>\n",
       "      <td>592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>meadows</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>paths</td>\n",
       "      <td>1008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>urban</td>\n",
       "      <td>272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>woods</td>\n",
       "      <td>1268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P  Habitat  Count\n",
       "0      edible  grasses   1408\n",
       "1      edible   leaves    240\n",
       "2      edible  meadows    256\n",
       "3      edible    paths    136\n",
       "4      edible    urban     96\n",
       "5      edible    waste    192\n",
       "6      edible    woods   1880\n",
       "7   poisonous  grasses    740\n",
       "8   poisonous   leaves    592\n",
       "9   poisonous  meadows     36\n",
       "10  poisonous    paths   1008\n",
       "11  poisonous    urban    272\n",
       "12  poisonous    woods   1268"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a dataframe to calculate count of mushrooms by E_P and Habitat\n",
    "EP_Habitat = newdf.groupby(['E_P','Habitat'],as_index=False)['SPcolor'].count()\n",
    "EP_Habitat.rename(columns={'SPcolor':'Count'},inplace=True)\n",
    "EP_Habitat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Habitat</th>\n",
       "      <th>Count_EP_Habitat</th>\n",
       "      <th>Count_Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>grasses</td>\n",
       "      <td>1408</td>\n",
       "      <td>2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>grasses</td>\n",
       "      <td>740</td>\n",
       "      <td>2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>leaves</td>\n",
       "      <td>240</td>\n",
       "      <td>832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>leaves</td>\n",
       "      <td>592</td>\n",
       "      <td>832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>meadows</td>\n",
       "      <td>256</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>meadows</td>\n",
       "      <td>36</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>edible</td>\n",
       "      <td>paths</td>\n",
       "      <td>136</td>\n",
       "      <td>1144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>paths</td>\n",
       "      <td>1008</td>\n",
       "      <td>1144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>edible</td>\n",
       "      <td>urban</td>\n",
       "      <td>96</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>urban</td>\n",
       "      <td>272</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>edible</td>\n",
       "      <td>waste</td>\n",
       "      <td>192</td>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>edible</td>\n",
       "      <td>woods</td>\n",
       "      <td>1880</td>\n",
       "      <td>3148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>woods</td>\n",
       "      <td>1268</td>\n",
       "      <td>3148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P  Habitat  Count_EP_Habitat  Count_Total\n",
       "0      edible  grasses              1408         2148\n",
       "1   poisonous  grasses               740         2148\n",
       "2      edible   leaves               240          832\n",
       "3   poisonous   leaves               592          832\n",
       "4      edible  meadows               256          292\n",
       "5   poisonous  meadows                36          292\n",
       "6      edible    paths               136         1144\n",
       "7   poisonous    paths              1008         1144\n",
       "8      edible    urban                96          368\n",
       "9   poisonous    urban               272          368\n",
       "10     edible    waste               192          192\n",
       "11     edible    woods              1880         3148\n",
       "12  poisonous    woods              1268         3148"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creates dataframe to merge total count of mushrooms by E_P or not and Odor by edible or not\n",
    "EP_Habitat = pd.merge(EP_Habitat,Habitat,on=['Habitat'],how='outer',suffixes=('_EP_Habitat','_Total'))\n",
    "EP_Habitat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>E_P</th>\n",
       "      <th>Habitat</th>\n",
       "      <th>Count_EP_Habitat</th>\n",
       "      <th>Count_Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>edible</td>\n",
       "      <td>grasses</td>\n",
       "      <td>1408</td>\n",
       "      <td>2148</td>\n",
       "      <td>65.549348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>grasses</td>\n",
       "      <td>740</td>\n",
       "      <td>2148</td>\n",
       "      <td>34.450652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>edible</td>\n",
       "      <td>leaves</td>\n",
       "      <td>240</td>\n",
       "      <td>832</td>\n",
       "      <td>28.846154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>leaves</td>\n",
       "      <td>592</td>\n",
       "      <td>832</td>\n",
       "      <td>71.153846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>edible</td>\n",
       "      <td>meadows</td>\n",
       "      <td>256</td>\n",
       "      <td>292</td>\n",
       "      <td>87.671233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>meadows</td>\n",
       "      <td>36</td>\n",
       "      <td>292</td>\n",
       "      <td>12.328767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>edible</td>\n",
       "      <td>paths</td>\n",
       "      <td>136</td>\n",
       "      <td>1144</td>\n",
       "      <td>11.888112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>paths</td>\n",
       "      <td>1008</td>\n",
       "      <td>1144</td>\n",
       "      <td>88.111888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>edible</td>\n",
       "      <td>urban</td>\n",
       "      <td>96</td>\n",
       "      <td>368</td>\n",
       "      <td>26.086957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>urban</td>\n",
       "      <td>272</td>\n",
       "      <td>368</td>\n",
       "      <td>73.913043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>edible</td>\n",
       "      <td>waste</td>\n",
       "      <td>192</td>\n",
       "      <td>192</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>edible</td>\n",
       "      <td>woods</td>\n",
       "      <td>1880</td>\n",
       "      <td>3148</td>\n",
       "      <td>59.720457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>poisonous</td>\n",
       "      <td>woods</td>\n",
       "      <td>1268</td>\n",
       "      <td>3148</td>\n",
       "      <td>40.279543</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          E_P  Habitat  Count_EP_Habitat  Count_Total     Percent\n",
       "0      edible  grasses              1408         2148   65.549348\n",
       "1   poisonous  grasses               740         2148   34.450652\n",
       "2      edible   leaves               240          832   28.846154\n",
       "3   poisonous   leaves               592          832   71.153846\n",
       "4      edible  meadows               256          292   87.671233\n",
       "5   poisonous  meadows                36          292   12.328767\n",
       "6      edible    paths               136         1144   11.888112\n",
       "7   poisonous    paths              1008         1144   88.111888\n",
       "8      edible    urban                96          368   26.086957\n",
       "9   poisonous    urban               272          368   73.913043\n",
       "10     edible    waste               192          192  100.000000\n",
       "11     edible    woods              1880         3148   59.720457\n",
       "12  poisonous    woods              1268         3148   40.279543"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creates column Percent to calculate percentage of mushrooms by E_P and by Odor\n",
    "EP_Habitat['Percent'] = (EP_Habitat['Count_EP_Habitat']/EP_Habitat['Count_Total']) * 100\n",
    "EP_Habitat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "#plots mushroom dataset by Odor and whether it is edible or not using the percentages\n",
    "sns.barplot(x='Habitat',y='Percent',hue='E_P',data=EP_Habitat);\n",
    "# give the plot a title\n",
    "plt.title('E_P and Habitat');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
